{"name":"Hive-serde","body":"# JSON Serde for Hive\r\n\r\n## Features\r\n\r\n* Full support for arrays, maps and structures\r\n* Automatic column to field mapping using table DDL\r\n* Map keys are case-insensitive for convenience\r\n* Optional ignoring of bad records\r\n\r\n## Setup\r\n\r\nCompile using `mvn clean package`, or download the release JAR:\r\n\r\n    curl -L http://bit.ly/mRYaNB > hive-serde-1.0.jar\r\n\r\nRegister the JAR with Hive:\r\n\r\n    add jar hive-serde-1.0.jar;\r\n\r\n## Examples\r\n\r\n### Simple Table\r\n\r\nCreate the table:\r\n\r\n    CREATE EXTERNAL TABLE message (\r\n      messageid string,\r\n      messagesize int\r\n    )\r\n    ROW FORMAT SERDE 'com.proofpoint.hive.serde.JsonSerde'\r\n    LOCATION '/tmp/json';\r\n\r\nCorresponding JSON record:\r\n\r\n    {\r\n      \"messageId\": \"34dd0d3c-f53b-11e0-ac12-d3e782dff199\",\r\n      \"messageSize\": 12345\r\n    }\r\n\r\nNotice that the JSON field names can contain upper case characters.\r\n\r\n### Ignoring Errors\r\n\r\nCreate a table and set the `errors.ignore` serde property:\r\n\r\n    CREATE EXTERNAL TABLE message (\r\n      messageid string,\r\n      messagesize int\r\n    )\r\n    ROW FORMAT SERDE 'com.proofpoint.hive.serde.JsonSerde'\r\n    WITH SERDEPROPERTIES ('errors.ignore' = 'true')\r\n    LOCATION '/tmp/json';\r\n\r\nWith the default `errors.ignore` value of `false`, an error in any record\r\nwill cause the entire query to fail.\r\n\r\nWhen set to `true`, if a record has errors, then every column for that\r\nrecord will be `NULL`. This is a limitation of the Hive serde API.\r\nUnfortunately, it is not possible for the serde to cause Hive to skip the\r\nrecord entirely. However, if you have a column that is never `NULL`, such\r\nas the primary key, you can use this column to filter out bad records:\r\n\r\n    SELECT * FROM message WHERE messageid IS NOT NULL;\r\n\r\nThis logic can be encapsulated into a view:\r\n\r\n    CREATE VIEW v_message AS\r\n    SELECT * FROM message WHERE messageid IS NOT NULL;\r\n\r\n### Nested Structures\r\n\r\nCreate the table:\r\n\r\n    CREATE EXTERNAL TABLE message (\r\n      messageid string,\r\n      messagesize int,\r\n      sender string,\r\n      recipients array<string>,\r\n      messageparts array<struct<\r\n        extension: string,\r\n        size: int\r\n      >>,\r\n      headers map<string,string>\r\n    )\r\n    ROW FORMAT SERDE 'com.proofpoint.hive.serde.JsonSerde'\r\n    LOCATION '/tmp/json';\r\n\r\nCorresponding JSON record:\r\n\r\n    {\r\n      \"messageId\": \"34dd0d3c-f53b-11e0-ac12-d3e782dff199\",\r\n      \"messageSize\": 12345,\r\n      \"sender\": \"alice@example.com\",\r\n      \"recipients\": [\"joe@example.com\", \"bob@example.com\"],\r\n      \"messageParts\": [\r\n        {\r\n          \"extension\": \"pdf\",\r\n          \"size\": 4567\r\n        },\r\n        {\r\n          \"extension\": \"jpg\",\r\n          \"size\": 9451\r\n        }\r\n      ],\r\n      \"headers\": {\r\n        \"Received-SPF\": \"pass\",\r\n        \"X-Broadcast-Id\": \"9876\"\r\n      }\r\n    }\r\n\r\nQuery the table:\r\n\r\n    SELECT\r\n      messageid,\r\n      recipients[0],\r\n      SIZE(recipients) AS recipient_count,\r\n      messageParts[0].extension,\r\n      headers['received-spf']\r\n    FROM message;","tagline":"JSON SerDe for Hive","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}